import java.util.*;
public class TaskScheduling{
  

  public static void main(String[] args) {

    boolean result = TaskScheduling.isSchedulingPossible(3, new int[][] { new int[] { 0, 1 }, new int[] { 1, 2 } });
    System.out.println("Tasks execution possible: " + result);

    result = TaskScheduling.isSchedulingPossible(3,
        new int[][] { new int[] { 0, 1 }, new int[] { 1, 2 }, new int[] { 2, 0 } });
    System.out.println("Tasks execution possible: " + result);

    result = TaskScheduling.isSchedulingPossible(6, new int[][] { new int[] { 2, 5 }, new int[] { 0, 5 },
        new int[] { 0, 4 }, new int[] { 1, 4 }, new int[] { 3, 2 }, new int[] { 1, 3 } });
    System.out.println("Tasks execution possible: " + result);
  }

public static boolean isSchedulingPossible(int tasks, int[][] prerequisites) {
    // TODO: Write your code here    
    List<Integer> sortedOrder = new ArrayList<Integer>(); 
     
    
    // Initialize the graph 
    HashMap<Integer, Integer> inDegree = new HashMap<>(); 
    HashMap<Integer, List<Integer>> graph = new HashMap<>();
    for(int i = 0; i < tasks; i++){
        inDegree.put(i, 0); 
        graph.put(i, new ArrayList<Integer>()); 
    }
    
    // Build the graph
    for(int i = 0; i < prerequisites.length; i++){
        int parent = prerequisites[i][0]; 
        int child = prerequisites[i][1]; 
        
        inDegree.put(child, inDegree.get(child)+1); 
        graph.get(parent).add(child); 
    }
    
    // Find all the sources and add them to a queue
    Queue<Integer> sources = new LinkedList<>(); 
    for(Map.Entry<Integer, Integer> entry : inDegree.entrySet()){
        if(entry.getValue() == 0) sources.add(entry.getKey());
    }
    
    /*
    Add it to the sorted list.
    Get all of its children from the graph.
    Decrement the in-degree of each child by 1.
    If a child’s in-degree becomes ‘0’, add it to the sources Queue.
    */
    
    while(!sources.isEmpty()){
        int task = sources.poll(); 
        sortedOrder.add(task); 
        List<Integer> childern = graph.get(task); 
        
        for(int child : childern){
            inDegree.put(child, inDegree.get(child)-1); 
            if(inDegree.get(child) == 0) sources.add(child);
        }
    }
    if(tasks == sortedOrder.size()) return true;
    
    return false;
  }
  
  
}
